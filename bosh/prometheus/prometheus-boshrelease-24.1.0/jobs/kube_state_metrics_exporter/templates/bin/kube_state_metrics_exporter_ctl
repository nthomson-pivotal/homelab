#!/usr/bin/env bash

set -eu

RUN_DIR=/var/vcap/sys/run/kube_state_metrics_exporter
LOG_DIR=/var/vcap/sys/log/kube_state_metrics_exporter
TMP_DIR=/var/vcap/sys/tmp/kube_state_metrics_exporter
STORE_DIR=/var/vcap/store/kube_state_metrics_exporter
mkdir -p ${RUN_DIR} ${LOG_DIR} ${TMP_DIR} ${STORE_DIR}

PIDFILE=${RUN_DIR}/kube_state_metrics_exporter.pid

source /var/vcap/packages/kube_state_metrics_exporter/common/utils.sh
exec 1>> ${LOG_DIR}/$(basename "$0").stdout.log
exec 2>> ${LOG_DIR}/$(basename "$0").stderr.log

export PATH=/var/vcap/packages/kube_state_metrics_exporter/bin:${PATH}

case $1 in
  start)
    pid_guard ${PIDFILE} "kube_state_metrics_exporter"
    echo $$ > ${PIDFILE}

    <% if_p('env.http_proxy') do |http_proxy| %>
    export HTTP_PROXY="<%= http_proxy %>"
    export http_proxy="<%= http_proxy %>"
    <% end %>
    <% if_p('env.https_proxy') do |https_proxy| %>
    export HTTPS_PROXY="<%= https_proxy %>"
    export https_proxy="<%= https_proxy %>"
    <% end %>
    <% if_p('env.no_proxy') do |no_proxy| %>
    export NO_PROXY="<%= no_proxy %>"
    export no_proxy="<%= no_proxy %>"
    <% end %>

    exec kube-state-metrics \
      <% if_p('kube_state_metrics_exporter.apiserver') do |apiserver| %> \
      --apiserver="<%= apiserver %>" \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.collectors') do |collectors| %> \
      --collectors="<%= collectors %>" \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.disable_node_non_generic_resource_metrics') do |disable_node_non_generic_resource_metrics| %> \
        <% if disable_node_non_generic_resource_metrics %> \
      --disable-node-non-generic-resource-metrics="<%= collectors %>" \
        <% end %> \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.disable_pod_non_generic_resource_metrics') do |disable_pod_non_generic_resource_metrics| %> \
        <% if disable_pod_non_generic_resource_metrics %> \
      --disable-pod-non-generic-resource-metrics \
        <% end %> \
      <% end %> \
      --kubeconfig="/var/vcap/jobs/kube_state_metrics_exporter/config/kubeconfig" \
      <% if_p('kube_state_metrics_exporter.log_backtrace_at') do |log_backtrace_at| %> \
      --log_backtrace_at="<%= log_backtrace_at %>" \
      <% end %> \
      --log_dir=${LOG_DIR} \
      <% if_p('kube_state_metrics_exporter.metric_blacklist') do |metric_blacklist| %> \
      --metric-blacklist="<%= metric_blacklist %>" \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.metric_whitelist') do |metric_whitelist| %> \
      --metric-whitelist="<%= metric_whitelist %>" \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.namespace') do |namespace| %> \
      --namespace="<%= namespace %>" \
      <% end %> \
      --port=<%= p('kube_state_metrics_exporter.port') %> \
      <% if_p('kube_state_metrics_exporter.stderrthreshold') do |stderrthreshold| %> \
      --stderrthreshold="<%= stderrthreshold %>" \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.telemetry_port') do |telemetry_port| %> \
      --telemetry-port="<%= telemetry_port %>" \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.v') do |v| %> \
      --v="<%= v %>" \
      <% end %> \
      <% if_p('kube_state_metrics_exporter.vmodule') do |vmodule| %> \
      --vmodule="<%= vmodule %>" \
      <% end %> \
      >>  ${LOG_DIR}/kube_state_metrics_exporter.stdout.log \
      2>> ${LOG_DIR}/kube_state_metrics_exporter.stderr.log
    ;;

  stop)
    kill_and_wait ${PIDFILE}
    ;;

  *)
    echo "Usage: $0 {start|stop}"
    exit 1
    ;;

esac
exit 0
