#!/bin/bash
#
# ci/scripts/shipit
#
# Script for generating Github release / tag assets
# and managing release notes for a BOSH Release pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

set -eu

: ${REPO_ROOT:?}
: ${REPO_OUT:?}
: ${RELEASE_ROOT:?}
: ${VERSION_FROM:?}
: ${AWS_ACCESS_KEY:?}
: ${AWS_SECRET_KEY:?}
: ${GIT_EMAIL:?}
: ${GIT_NAME:?}
: ${GITHUB_OWNER:?}
: ${BRANCH:?}
: ${NOTIFICATION_OUT:?}

if [[ ! -f ${VERSION_FROM} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) not found. Did you misconfigure Concourse?"
  exit 1
fi
VERSION=$(cat ${VERSION_FROM})
if [[ -z ${VERSION} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) was empty. Did you misconfigure Concourse?"
  exit 1
fi

if [[ ! -f ${REPO_ROOT}/ci/release_notes.md ]]; then
  echo >&2 "ci/release_notes.md not found. Did you forget to write them?"
  exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

###############################################################

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

###############################################################

header "Creating final release..."
cd ${REPO_ROOT}
git submodule update --init --recursive --force
cat > config/private.yml <<EOF
---
blobstore:
  provider: s3
  options:
    access_key_id: ${AWS_ACCESS_KEY}
    secret_access_key: ${AWS_SECRET_KEY}
EOF
RELEASE_NAME=$(bosh int config/final.yml --path /final_name)
bosh -n create-release --final --version "${VERSION}"
bosh -n create-release releases/${RELEASE_NAME}/${RELEASE_NAME}-${VERSION}.yml \
        --tarball releases/${RELEASE_NAME}/${RELEASE_NAME}-${VERSION}.tgz
cd -

###############################################################

header "Generating github release artifacts..."
RELEASE_TGZ=${REPO_ROOT}/releases/${RELEASE_NAME}/${RELEASE_NAME}-${VERSION}.tgz
SHA1=$(sha1sum ${RELEASE_TGZ} | head -n1 | awk '{print $1}')
mkdir -p ${RELEASE_ROOT}/artifacts
mv ${RELEASE_TGZ}                            ${RELEASE_ROOT}/artifacts
echo "v${VERSION}"                         > ${RELEASE_ROOT}/name
echo "v${VERSION}"                         > ${RELEASE_ROOT}/tag
mv ${REPO_ROOT}/ci/release_notes.md          ${RELEASE_ROOT}/notes.md
cat >> ${RELEASE_ROOT}/notes.md <<EOF
## Deployment
\`\`\`yaml
releases:
  - name: ${RELEASE_NAME}
    version: ${VERSION}
    url: https://github.com/${GITHUB_OWNER}/${RELEASE_NAME}-boshrelease/releases/download/v${VERSION}/${RELEASE_NAME}-${VERSION}.tgz
    sha1: ${SHA1}
\`\`\`
EOF

###############################################################

header "Updating git repo with final release..."
if [[ -z $(git config --global user.email) ]]; then
  git config --global user.email "${GIT_EMAIL}"
fi
if [[ -z $(git config --global user.name) ]]; then
  git config --global user.name "${GIT_NAME}"
fi

cd ${REPO_ROOT}
for MANIFEST_PATH in $(ls manifests/*.yml); do
  ${DIR}/update-manifest ${GITHUB_OWNER} ${RELEASE_NAME} ${VERSION} ${SHA1} ${MANIFEST_PATH}
done
git merge --no-edit ${BRANCH}
git add -A
git status
git commit -m "${RELEASE_NAME} BOSH release v${VERSION}"
cd -

cp -a ${REPO_ROOT} ${REPO_OUT}

###############################################################

header "Generating notification message..."
cat > ${NOTIFICATION_OUT}/message <<EOF
New ${RELEASE_NAME} BOSH release v${VERSION} released. <https://github.com/${GITHUB_OWNER}/${RELEASE_NAME}-boshrelease/releases/tag/v${VERSION}|Release notes>.
EOF

###############################################################

header "SUCCESS"

exit 0
