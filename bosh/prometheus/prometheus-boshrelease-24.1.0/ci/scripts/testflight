#!/bin/bash
#
# ci/scripts/testflight
#
# Script for testing a BOSH release using bosh
#
# author:  James Hunt <james@niftylogic.com>

set -e

: ${REPO_ROOT:?}
: ${AWS_ACCESS_KEY:?}
: ${AWS_SECRET_KEY:?}
: ${STEMCELL:?}
: ${BOSH_DEPLOYMENT:?}
: ${MANIFEST_PATH:?}

if [[ ! -f ${REPO_ROOT}/${MANIFEST_PATH} ]]; then
	echo "Deployment manifest ${MANIFEST_PATH} does not exist"
	exit 1
fi

op_file_errors=
for op_file in ${MANIFEST_OP_PATHS//,/ }; do
	if [[ ! -f  ${REPO_ROOT}/$op_file ]]; then
		op_file_errors=1
		echo "Operator file missing: ${op_file}"
	fi
done
if [[ ! -z ${op_file_errors} ]]; then
	exit 1
fi

###############################################################

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

###############################################################

header "Starting bosh..."
/usr/local/bin/start-bosh
source /tmp/local-bosh/director/env

###############################################################

header "Uploading stemcell..."
bosh -n upload-stemcell ${STEMCELL}

###############################################################

header "Creating candidate release..."
cd ${REPO_ROOT}
git submodule update --init --recursive --force
cat > config/private.yml <<EOF
---
blobstore:
  provider: s3
  options:
    access_key_id: ${AWS_ACCESS_KEY}
    secret_access_key: ${AWS_SECRET_KEY}
EOF
bosh -n reset-release
bosh -n create-release
cd -

###############################################################

header "Uploading candidate release..."
cd ${REPO_ROOT}
bosh -n upload-release --rebase
cd -

###############################################################

header "Generating deployment manifest..."
cd ${REPO_ROOT}
mkdir -p tmp

RELEASE_NAME=$(bosh int config/final.yml --path /final_name)
cat > tmp/deployment.yml <<EOF
---
- type: replace
  path: /name
  value: ${BOSH_DEPLOYMENT}
- type: replace
  path: /releases/name=${RELEASE_NAME}
  value:
    name: ${RELEASE_NAME}
    version: latest
EOF

VM_TYPE=$(bosh int <(bosh cloud-config) --path /vm_types/0/name)
NETWORK=$(bosh int <(bosh cloud-config) --path /networks/0/name)
AZ=$(bosh int <(bosh cloud-config) --path /azs/0/name)
for ig_name in $(spruce json ${MANIFEST_PATH} | jq -r ".instance_groups[].name"); do
cat >> tmp/deployment.yml <<EOF
- type: replace
  path: /instance_groups/name=${ig_name}/vm_type
  value: ${VM_TYPE}
- type: replace
  path: /instance_groups/name=${ig_name}/networks
  value: [{name: ${NETWORK}}]
- type: replace
  path: /instance_groups/name=${ig_name}/azs
  value: [${AZ}]
EOF
done

OP_FILES_FLAGS=""
for op_file in ${MANIFEST_OP_PATHS//,/ }; do
   OP_FILES_FLAGS="${OP_FILES_FLAGS} -o $op_file"
done

echo "${MANIFEST_VARS:-"{} ---"}" | sed -e "s/ *= */: /g" > tmp/vars.yml

bosh int ${MANIFEST_PATH}    \
  -o tmp/deployment.yml      \
  ${OP_FILES_FLAGS}          \
  --vars-store tmp/creds.yml \
  --vars-file  tmp/vars.yml  \
  --var-errs                 \
  > tmp/manifest.yml
cd -

###############################################################

header "Deploying candidate release..."
cd ${REPO_ROOT}
bosh -n deploy tmp/manifest.yml
cd -

###############################################################

if [[ -n ${TEST_ERRANDS:-} ]]; then
  for errand in ${TEST_ERRANDS}; do
		header "Running '${errand}' errand..."
		bosh -n run-errand ${errand}
	done
fi

###############################################################

header "SUCCESS"

exit 0
